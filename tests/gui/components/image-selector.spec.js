/*
 * Copyright 2017 Pine64
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const m = require('mochainon');
const _ = require('lodash');
const angular = require('angular');
const Map = require('immutable').Map;
require('angular-mocks');

// $$hashKey is generated by angular to keep track data when it need to update the DOM
const sampleOSData = {
  $$hashKey: 123,
  name: 'SMALL TEST',
  logo: 'ubuntu.png',
  description: 'Small Test',
  instructions: null,
  instructionsUrl: null,
  releaseNotesUrl: null,
  versions: [
    {
      version: '1.0',
      images: [
        {
          url: 'http://some.url/to/image.1.0.tar.gz',
          checksumType: 'md5',
          checksum: 'e5b4ee5f5acf2613b197fe1edf29a80c',
          recommendedDriveSize: 4000000000
        }
      ]
    },
    {
      version: '2.0',
      images: [
        {
          url: 'http://some.url/to/image.2.0.tar.gz',
          checksumType: 'md5',
          checksum: 'e3920398427c873982738fvcc8ef233',
          recommendedDriveSize: 4000000000
        }
      ]
    }
  ]
};

const sampleImageFile = {
  path: 'rpi.img',
  size: 999999
};

describe('Browser: ImageSelector', function() {

  beforeEach(angular.mock.module(
    require('../../../lib/gui/pages/main/main')
  ));

  describe('ImageSelectorController', function() {

    let $controller;
    let controller;
    let WarningModalService;
    let AppConfigService;
    let testResult;

    beforeEach(angular.mock.inject(function(_$controller_, _WarningModalService_, _AppConfigService_) {
      $controller = _$controller_;
      WarningModalService = _WarningModalService_;
      AppConfigService = _AppConfigService_;

      const stubModalInstance = {
        close: (result) => {
          testResult = result;
        }
      };

      controller = $controller('ImageSelectorController', {
        $scope: {},
        $uibModalInstance: stubModalInstance
      });
    }));

    describe('Select OS or local image file only', function() {

      it('should reset selected OS when drop a local image file', function() {
        controller.resetSelectedOS();
        controller.resetSelectedImageFile();

        controller.setCurrentOS(sampleOSData);

        controller.selectLocalImage(sampleImageFile);

        m.chai.expect(controller.selectedImageFile).not.to.be.a('null');
        m.chai.expect(controller.selectedOS).to.be.a('null');
      });

      it('should reset local image when selected an OS', function() {
        controller.resetSelectedOS();
        controller.resetSelectedImageFile();

        controller.selectLocalImage(sampleImageFile);

        controller.setCurrentOS(sampleOSData);

        m.chai.expect(controller.selectedOS).not.to.be.a('null');
        m.chai.expect(controller.selectedImageFile).to.be.a('null');
      });
    });

    describe('.getOSLogo', function() {
      it('should get absolute path to the server', function() {
        const imgPath = 'relative/path/to/image.jpg';
        const resultPath = controller.getOSLogo(imgPath);

        m.chai.expect(resultPath).contain(AppConfigService.PACKAGE_PATH);
        m.chai.expect(resultPath).to.be.equal(AppConfigService.PACKAGE_PATH + '/' + imgPath);
      });

      it('should return same absolute path', function() {
        const imgPath = 'http://www.sample.com/image/path.jpg';
        const resultPath = controller.getOSLogo(imgPath);

        m.chai.expect(resultPath).to.be.equal(imgPath);
      });

      it('should reject given path is not a string', function() {
        m.chai.expect(function() {
          controller.getOSLogo({
            path: 'test/path.jpg'
          });
        }).to.throw(Error, 'imagePath is not a string');

        m.chai.expect(function() {
          controller.getOSLogo([
            'image.jpg',
            'in.jpg',
            'array.jpg'
          ]);
        }).to.throw(Error, 'imagePath is not a string');
      });
    });

    describe('.setCurrentOSVersion', function() {
      beforeEach(function() {
        controller.setCurrentOS(sampleOSData);
      });

      it('should able to get mentioned version', function() {
        controller.setCurrentOSVersion('1.0');
        m.chai.expect(controller.getCurrentOSVersion(sampleOSData)).to.be.equal('1.0');
      });

      it('should not able to return selected version of other OS', function() {
        const otherOS = {
          $$hashKey: 124,
          name: 'Other OS',
          logo: 'ubuntu.png',
          description: 'Small Test',
          instructions: null,
          instructionsUrl: null,
          releaseNotesUrl: null,
          versions: [
            {
              version: '1.1',
              images: [
                {
                  url: 'http://some.url/to/image.1.1.tar.gz',
                  checksumType: 'md5',
                  checksum: 'e5b4ee5f5acf2613b197fe1edf29a80c',
                  recommendedDriveSize: 4000000000
                }
              ]
            },
            {
              version: '2.2',
              images: [
                {
                  url: 'http://some.url/to/image.2.2.tar.gz',
                  checksumType: 'md5',
                  checksum: 'e3920398427c873982738fvcc8ef233',
                  recommendedDriveSize: 4000000000
                }
              ]
            }
          ]
        };

        controller.setCurrentOSVersion('1.0');
        m.chai.expect(controller.getCurrentOSVersion(otherOS)).to.be.undefined;
      });

      it('should not able to set version if no OS has being selected', function() {
        controller.resetSelectedOS();

        m.chai.expect(controller.selectedOS).to.be.null;

        controller.setCurrentOSVersion('1.0');
        m.chai.expect(controller.getCurrentOSVersion(sampleOSData)).to.be.undefined;
      });
    });

    describe('.resetSelectedOS', function() {

      it('should reset only selected OS', function() {
        controller.setCurrentOS(sampleOSData);
        m.chai.expect(controller.selectedOS).not.to.be.null;

        controller.setCurrentOSVersion('1.0');
        m.chai.expect(controller.overrideVersion).not.to.be.null;

        controller.resetSelectedOS();
        m.chai.expect(controller.selectedOS).to.be.null;
        m.chai.expect(controller.overrideVersion).to.be.null;
      });
    });

    describe('.resetSelectedImageFile', function() {
      it('should reset only image file', function() {
        controller.selectLocalImage(sampleImageFile);
        m.chai.expect(controller.selectedImageFile).not.to.be.null;

        controller.resetSelectedImageFile();
        m.chai.expect(controller.selectedImageFile).to.be.null;
      });
    });

    describe('.shouldOKButtonDisabled()', function() {

      beforeEach(function() {
        controller.resetSelectedOS();
        controller.resetSelectedImageFile();
      });

      it('should be disabled when nothing is selected', function() {
        m.chai.expect(controller.shouldOKButtonDisabled()).to.be.true;
      });

      it('should be enabled if an OS selected', function() {
        controller.selectLocalImage(sampleImageFile);

        m.chai.expect(controller.shouldOKButtonDisabled()).to.be.false;
      });

      it('should be enabled when local image file is selected', function() {
        controller.setCurrentOS(sampleOSData);

        m.chai.expect(controller.shouldOKButtonDisabled()).to.be.false;
      });
    });

    describe('.closeModal()', function() {
      beforeEach(() => {
        controller.resetSelectedOS();
        controller.resetSelectedImageFile();
      });

      afterEach(() => {
        testResult = undefined;
      });

      it('should be returning selected OS', function() {
        controller.setCurrentOS(sampleOSData);
        controller.closeModal(controller);

        m.chai.expect(testResult).to.be.a('object');
        m.chai.expect(testResult.localImage).to.be.undefined;
        m.chai.expect(testResult.selectedOS).to.be.deep.equal(sampleOSData);
        m.chai.expect(testResult.selectedVersion).to.be.a('object');
        m.chai.expect(testResult.selectedVersion).to.be.deep.equal(sampleOSData.versions[0]);
      });

      it('should be returning selected OS with specific version', function() {
        controller.setCurrentOS(sampleOSData);
        controller.setCurrentOSVersion('2.0');
        controller.closeModal(controller);

        m.chai.expect(testResult).to.be.a('object');
        m.chai.expect(testResult.localImage).to.be.undefined;
        m.chai.expect(testResult.selectedOS).to.be.deep.equal(sampleOSData);
        m.chai.expect(testResult.selectedVersion).to.be.a('object');
        m.chai.expect(testResult.selectedVersion).to.be.deep.equal(sampleOSData.versions[1]);
      });

      it('should prompt user if there is any extra instruction on selected OS', m.sinon.test(function() {
        let sampleOSDataWithInstruction = new Map(sampleOSData);
        sampleOSDataWithInstruction = sampleOSDataWithInstruction.set('instructions', 'This instruction need your attentions');
        sampleOSDataWithInstruction = sampleOSDataWithInstruction.set('instructionsUrl', 'http://www.sample.com/instruction');

        // stub WarningModalService.display
        const promptStub = m.sinon.stub(WarningModalService, 'display');

        // simulate promise
        promptStub.returns({
          then: _.noop,
          catch: _.noop
        });

        controller.setCurrentOS(sampleOSDataWithInstruction.toJS());
        controller.closeModal(controller);

        m.sinon.assert.calledWith(promptStub, {
          confirmationLabel: 'Visit the site',
          rejectionLabel: 'Continue',
          description: sampleOSDataWithInstruction.toJS().instructions
        });
      }));

      it('should be returning selected local image file', function() {
        controller.selectLocalImage(sampleImageFile);
        controller.closeModal(controller);

        m.chai.expect(testResult).to.be.a('object');
        m.chai.expect(testResult.selectedOS).to.be.undefined;
        m.chai.expect(testResult.localImage).to.be.deep.equal(sampleImageFile);
      });
    });

  });

});
